C51 COMPILER V9.01   EEPROM                                                                06/02/2021 22:42:39 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN EEPROM.obj
COMPILER INVOKED BY: D:\keil4\C51\BIN\C51.EXE SRC\EEPROM.C LARGE BROWSE INCDIR(.\SRC) DEBUG OBJECTEXTEND PRINT(.\EEPROM.
                    -lst) OBJECT(EEPROM.obj)

line level    source

   1          //============================================================================
   2          //prjname :STC89C51RC,STC89C52RC,STC89C54RD+ EEPROM例程
   3          //funtion :程序实现P0口,P1口分别驱动LED灯(低电平亮)把两个8位变量count.dat
   4          //         显示出来,这两个个八位约1s自增一次，且变量的值能够掉电保护
   5          //author :viviFire
   6          //说明   :STC89C51RC,STC89C52RC的EEPROM的第一扇区起始地址为0x2000
   7          //    STC89C54RD+的EEPROM的第一扇区起始地址为0x8000,需修改本程序
   8          //    其他芯片请参考手册
   9          //    运用本程序请注明出自 viviFire, http://hi.baidu.com/2vivifire
  10          //    本程序参考 宏晶公司提供的STC5Axx 系列 EEPROM 例子程序
  11          //============================================================================
  12          
  13          #include "reg52.h"
  14          #include "intrins.h"
  15          #include "uart.h"
  16          
  17          #define u16 unsigned int
  18          #define u8 unsigned char
  19          sfr IAP_DATA    = 0xE2;
  20          sfr IAP_ADDRH   = 0xE3;
  21          sfr IAP_ADDRL   = 0xE4;
  22          sfr IAP_CMD     = 0xE5;
  23          sfr IAP_TRIG    = 0xE6;
  24          sfr IAP_CONTR   = 0xE7;
  25          
  26          //定义Flash 操作等待时间及允许IAP/ISP/EEPROM 操作的常数
  27          //#define ENABLE_ISP 0x80 //系统工作时钟<5MHz 时，对IAP_CONTR 寄存器设置此值
  28          //#define ENABLE_ISP 0x81 //系统工作时钟<10MHz 时，对IAP_CONTR 寄存器设置此值
  29          #define ENABLE_ISP 0x82 //系统工作时钟<20MHz 时，对IAP_CONTR 寄存器设置此值
  30          //#define ENABLE_ISP 0x83 //系统工作时钟<40MHz 时，对IAP_CONTR 寄存器设置此值
  31          
  32          #define DATA_FLASH_START_ADDRESS 0x8000 //STC89C58RD+系列 EEPROM 测试起始地址
  33          //------------------------------------------------------------------------------------------
  34          
  35          u8 Byte_Read(u16 add);              //读一字节，调用前需打开IAP 功能
  36          void Byte_Program(u16 add, u8 ch); //字节编程，调用前需打开IAP 功能
  37          void Sector_Erase(u16 add);            //擦除扇区
  38          void IAP_Disable();                       //关闭IAP 功能
  39          void delayms(u16 z);
  40          //------------------------------------------------------------------------------
  41          /*struct EEP_dat
  42          {   
  43          u16 add;
  44          u8 dat;
  45          }count;*/
  46          //------------------------------------------------------------------------------
  47          //a: 扇区 (0~7) 代表1到8个扇区
  48          void EEPROM_WRITE(u8 a,u8 *p,u8 b)
  49          {       
  50   1         u8 i;
  51   1         Sector_Erase(DATA_FLASH_START_ADDRESS+0x2000*a);//删除第a+1个扇区内容，才能写入  
  52   1      
  53   1         for(i=0;i<b;i++)
  54   1         Byte_Program(DATA_FLASH_START_ADDRESS+0x2000*a+i,p[i]);
C51 COMPILER V9.01   EEPROM                                                                06/02/2021 22:42:39 PAGE 2   

  55   1         delayms(500);
  56   1      
  57   1      }//-----------------------------------------------------------------------------
  58          void EEPROM_READ(u8 a, u8 *p, u8 b)
  59          {
  60   1         u8 i;
  61   1         
  62   1         for(i=0;i<b;i++)
  63   1         p[i]=Byte_Read(DATA_FLASH_START_ADDRESS+0x2000*a+i);     
  64   1         delayms(500);
  65   1      }//-----------------------------------------------------------------------------
  66          //读一字节，调用前需打开IAP 功能，入口:DPTR = 字节地址，返回:A = 读出字节
  67          u8 Byte_Read(u16 add)
  68          {
  69   1          IAP_DATA = 0x00;
  70   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
  71   1          IAP_CMD = 0x01;                 //IAP/ISP/EEPROM 字节读命令
  72   1      
  73   1          IAP_ADDRH = (u8)(add>>8);    //设置目标单元地址的高8 位地址
  74   1          IAP_ADDRL = (u8)(add&0xff);    //设置目标单元地址的低8 位地址
  75   1      
  76   1          EA = 0;
  77   1          IAP_TRIG = 0x46;   //先送 46h,再送B9h 到ISP/IAP 触发寄存器,每次都需如此
  78   1          IAP_TRIG = 0xB9;   //送完 B9h 后，ISP/IAP 命令立即被触发起动
  79   1          _nop_();
  80   1          EA = 1;
  81   1          IAP_Disable(); //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  82   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  83   1          return (IAP_DATA);
  84   1      }//------------------------------------------------------------------------------
  85          
  86          //字节编程，调用前需打开IAP 功能，入口:DPTR = 字节地址, A= 须编程字节的数据
  87          void Byte_Program(u16 add,u8 ch)
  88          {
  89   1          IAP_CONTR = ENABLE_ISP;         //打开 IAP 功能, 设置Flash 操作等待时间
  90   1          IAP_CMD = 0x02;                 //IAP/ISP/EEPROM 字节编程命令
  91   1      
  92   1      
  93   1          IAP_ADDRH = (u8)(add>>8);    //设置目标单元地址的高8 位地址
  94   1          IAP_ADDRL = (u8)(add&0xff);    //设置目标单元地址的低8 位地址
  95   1      
  96   1          IAP_DATA = ch;                  //要编程的数据先送进IAP_DATA 寄存器
  97   1          EA = 0;
  98   1          IAP_TRIG = 0x46;   //先送 46h,再送B9h 到ISP/IAP 触发寄存器,每次都需如此
  99   1          IAP_TRIG = 0xB9;   //送完 B9h 后，ISP/IAP 命令立即被触发起动
 100   1          _nop_();
 101   1          EA = 1;
 102   1          IAP_Disable(); //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
 103   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
 104   1      }//------------------------------------------------------------------------------
 105          
 106          //擦除扇区, 入口:DPTR = 扇区地址
 107          void Sector_Erase(u16 add)
 108          {
 109   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
 110   1          IAP_CMD = 0x03;                 //IAP/ISP/EEPROM 扇区擦除命令
 111   1      
 112   1          IAP_ADDRH = (u8)(add>>8);    //设置目标单元地址的高8 位地址
 113   1          IAP_ADDRL = (u8)(add&0xff);    //设置目标单元地址的低8 位地址
 114   1      
 115   1          EA = 0;
 116   1          IAP_TRIG = 0x46;   //先送 46h,再送B9h 到ISP/IAP 触发寄存器,每次都需如此
C51 COMPILER V9.01   EEPROM                                                                06/02/2021 22:42:39 PAGE 3   

 117   1          IAP_TRIG = 0xB9;   //送完 B9h 后，ISP/IAP 命令立即被触发起动
 118   1          _nop_();
 119   1          EA = 1;
 120   1          IAP_Disable(); //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
 121   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
 122   1      }//------------------------------------------------------------------------------
 123          
 124          void IAP_Disable()
 125          {
 126   1          //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
 127   1          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
 128   1          IAP_CONTR = 0;      //关闭IAP 功能
 129   1          IAP_CMD   = 0;      //清命令寄存器,使命令寄存器无命令,此句可不用
 130   1          IAP_TRIG = 0;      //清命令触发寄存器,使命令触发寄存器无触发,此句可不用
 131   1          IAP_ADDRH = 0;
 132   1          IAP_ADDRL = 0;
 133   1      }//------------------------------------------------------------------------------
 134          void delayms(u16 z)
 135          {
 136   1      u16 x,y;
 137   1      for(x=z;x>0;x--)
 138   1         for(y=125;y>0;y--);
 139   1      }//-------------------------------------------------------------------------------


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    354    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
